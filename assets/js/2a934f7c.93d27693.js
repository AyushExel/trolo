"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[820],{9017:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"features/inference","title":"Inference","description":"trolo provides both a CLI interface and Python API for inference.","source":"@site/docs/features/inference.md","sourceDirName":"features","slug":"/features/inference","permalink":"/trolo/features/inference","draft":false,"unlisted":false,"editUrl":"https://github.com/ayushexel/trolo/tree/main/docs/docs/features/inference.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"D-fine Model","permalink":"/trolo/models/d-fine"},"next":{"title":"Training","permalink":"/trolo/features/training"}}');var s=i(4848),t=i(8453);const o={sidebar_position:1},c="Inference",l={},a=[{value:"CLI Usage",id:"cli-usage",level:2},{value:"Basic inference with automatic model download",id:"basic-inference-with-automatic-model-download",level:3},{value:"Inference on specific input",id:"inference-on-specific-input",level:3},{value:"Support for multiple input types",id:"support-for-multiple-input-types",level:3},{value:"Smart Video Stream Inference",id:"smart-video-stream-inference",level:2},{value:"Python API",id:"python-api",level:2},{value:"Prediction results",id:"prediction-results",level:3},{value:"Useful model information like class names",id:"useful-model-information-like-class-names",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"inference",children:"Inference"})}),"\n",(0,s.jsx)(n.p,{children:"trolo provides both a CLI interface and Python API for inference."}),"\n",(0,s.jsx)(n.h2,{id:"cli-usage",children:"CLI Usage"}),"\n",(0,s.jsx)(n.p,{children:"Run inference on different inputs:"}),"\n",(0,s.jsx)(n.h3,{id:"basic-inference-with-automatic-model-download",children:"Basic inference with automatic model download"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"trolo predict --model dfine-n\n"})}),"\n",(0,s.jsx)(n.h3,{id:"inference-on-specific-input",children:"Inference on specific input"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"trolo predict --model dfine-n.pth --input img.jpg\n"})}),"\n",(0,s.jsx)(n.h3,{id:"support-for-multiple-input-types",children:"Support for multiple input types"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"trolo predict --model dfine-n.pth --input folder/ # image folder\ntrolo predict --model dfine-n.pth --input video.mp4 # video file\ntrolo predict --model dfine-n.pth --input 0 # webcam\n"})}),"\n",(0,s.jsx)(n.h2,{id:"smart-video-stream-inference",children:"Smart Video Stream Inference"}),"\n",(0,s.jsx)(n.p,{children:"trolo implements streaming inference for videos to handle memory efficiently. This means you can process large videos without worrying about memory constraints."}),"\n",(0,s.jsx)(n.h2,{id:"python-api",children:"Python API"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from trolo.inference import DetectionPredictor\n\n# Initialize predictor\npredictor = DetectionPredictor(model="dfine-n")\n\n# Get raw predictions\npredictions = predictor.predict()\n\n# Visualize results\nplotted_preds = predictor.visualize(show=True, save=True)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"prediction-results",children:"Prediction results"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"predict"})," method returns a list of dictionaries, where each dictionary contains the prediction results for an image."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Example prediction\npreds = predictor.predict()\n\nfor pred in preds:\n    boxes = pred['boxes']\n    scores = pred['scores']\n    labels = pred['labels']\n    # ... #\n"})}),"\n",(0,s.jsx)(n.h3,{id:"useful-model-information-like-class-names",children:"Useful model information like class names"}),"\n",(0,s.jsx)(n.p,{children:"Models trained with trolo are saved with useful information like class names. These can be accessed by:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class_names = predictor.config.yaml_cfg['class_names']\n"})}),"\n",(0,s.jsx)(n.p,{children:"You can then implement your own custom visualization function using these class names."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Example\npredictor = DetectionPredictor(model=\"dfine-n\")\n\npreds = predictor.predict()\nclass_names = predictor.config.yaml_cfg['class_names']\n\nfor pred in preds:\n    boxes = pred['boxes']\n    scores = pred['scores']\n    labels = pred['labels']\n    # ... #\n    for box, score, label in zip(boxes, scores, labels):\n        print(f\"Label: {class_names[label]}, Score: {score:.2f}\")\n"})})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>c});var r=i(6540);const s={},t=r.createContext(s);function o(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);